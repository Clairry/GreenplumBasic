-- Сначала создаем таблицы с помощью следующих DDL:
CREATE TABLE customer (
    C_CUSTKEY INT,
    C_NAME VARCHAR(25),
    C_ADDRESS VARCHAR(40),
    C_NATIONKEY INTEGER,
    C_PHONE CHAR(15),
    C_ACCTBAL DECIMAL(15, 2),
    C_MKTSEGMENT CHAR(10),
    C_COMMENT VARCHAR(117)
) WITH (appendonly = true, orientation = column) 
DISTRIBUTED BY (C_CUSTKEY);

CREATE TABLE lineitem (
    L_ORDERKEY BIGINT,
    L_PARTKEY INT,
    L_SUPPKEY INT,
    L_LINENUMBER INTEGER,
    L_QUANTITY DECIMAL(15, 2),
    L_EXTENDEDPRICE DECIMAL(15, 2),
    L_DISCOUNT DECIMAL(15, 2),
    L_TAX DECIMAL(15, 2),
    L_RETURNFLAG CHAR(1),
    L_LINESTATUS CHAR(1),
    L_SHIPDATE DATE,
    L_COMMITDATE DATE,
    L_RECEIPTDATE DATE,
    L_SHIPINSTRUCT CHAR(25),
    L_SHIPMODE CHAR(10),
    L_COMMENT VARCHAR(44)
) WITH (
    appendonly = true,
    orientation = column,
    compresstype = ZSTD
) 
DISTRIBUTED BY (L_ORDERKEY, L_LINENUMBER) 
PARTITION BY RANGE (L_SHIPDATE) 
    (start('1992-01-01') INCLUSIVE end ('1998-12-31') INCLUSIVE every (30), default partition others);

CREATE TABLE orders (
    O_ORDERKEY BIGINT,
    O_CUSTKEY INT,
    O_ORDERSTATUS CHAR(1),
    O_TOTALPRICE DECIMAL(15, 2),
    O_ORDERDATE DATE,
    O_ORDERPRIORITY CHAR(15),
    O_CLERK CHAR(15),
    O_SHIPPRIORITY INTEGER,
    O_COMMENT VARCHAR(79)
) WITH (
    appendonly = true,
    orientation = column,
    compresstype = ZSTD
) 
DISTRIBUTED BY (O_ORDERKEY) 

CREATE TABLE part (
    P_PARTKEY INT,
    P_NAME VARCHAR(55),
    P_MFGR CHAR(25),
    P_BRAND CHAR(10),
    P_TYPE VARCHAR(25),
    P_SIZE INTEGER,
    P_CONTAINER CHAR(10),
    P_RETAILPRICE DECIMAL(15, 2),
    P_COMMENT VARCHAR(23)
) WITH (appendonly = true, orientation = column) 
DISTRIBUTED BY (P_PARTKEY);

CREATE TABLE partsupp (
    PS_PARTKEY INT,
    PS_SUPPKEY INT,
    PS_AVAILQTY INTEGER,
    PS_SUPPLYCOST DECIMAL(15, 2),
    PS_COMMENT VARCHAR(199)
) WITH (appendonly = true, orientation = column) 
DISTRIBUTED BY (PS_PARTKEY, PS_SUPPKEY);

CREATE TABLE region (
    R_REGIONKEY INTEGER,
    R_NAME CHAR(25),
    R_COMMENT VARCHAR(152)
) WITH (appendonly = true, orientation = column) 
DISTRIBUTED BY (R_REGIONKEY);

CREATE TABLE supplier (
    S_SUPPKEY INT,
    S_NAME CHAR(25),
    S_ADDRESS VARCHAR(40),
    S_NATIONKEY INTEGER,
    S_PHONE CHAR(15),
    S_ACCTBAL DECIMAL(15, 2),
    S_COMMENT VARCHAR(101)
) WITH (appendonly = true, orientation = column) 
DISTRIBUTED BY (S_SUPPKEY);

-- Теперь формируем запросы и пробуем на них различные индексы:
-- Retrieve Customer Orders with Order and Customer Details
explain analyse
SELECT customer.C_NAME, 
       customer.C_ADDRESS,
       customer.C_PHONE,
       orders.O_ORDERDATE,
       orders.O_ORDERSTATUS,
       orders.O_SHIPPRIORITY
FROM customer inner join orders on (customer.C_CUSTKEY = orders.O_CUSTKEY)
where customer.C_NAME = 'Customer#000000005'
-- Получившееся время - Execution time: 20.777 ms
-- План запроса:
Gather Motion 4:1  (slice2; segments: 4)  (cost=0.00..862.00 rows=1 width=76) (actual time=19.684..19.684 rows=0 loops=1)
  ->  Hash Join  (cost=0.00..862.00 rows=1 width=76) (never executed)
        Hash Cond: (customer.c_custkey = orders.o_custkey)
        ->  Seq Scan on customer  (cost=0.00..431.00 rows=1 width=70) (actual time=0.183..2.471 rows=1 loops=1)
              Filter: ((c_name)::text = 'Customer#000000005'::text)
        ->  Hash  (cost=431.00..431.00 rows=1 width=14) (actual time=7.189..7.189 rows=20000 loops=1)
              ->  Broadcast Motion 4:4  (slice1; segments: 4)  (cost=0.00..431.00 rows=1 width=14) (actual time=0.043..3.159 rows=20000 loops=1)
                    ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=14) (actual time=0.210..2.649 rows=5074 loops=1)
Planning time: 5.690 ms
  (slice0)    Executor memory: 928K bytes.
  (slice1)    Executor memory: 508K bytes avg x 4 workers, 508K bytes max (seg0).
  (slice2)    Executor memory: 6664K bytes avg x 4 workers, 6664K bytes max (seg0).  Work_mem: 782K bytes max.
Memory used:  128000kB
Optimizer: Pivotal Optimizer (GPORCA)

-- Предполагаем, что нужно будет возвращать все заказы по фильтру конкретного кастомера.
-- C_NAME имеет большой процент уникальных значений. 
-- Так как мы будем искать детальную информацию по конкретному кастомеру, попробуем добавить b-tree индекс.
create index idx_customer_name ON customer USING btree (C_NAME)

explain analyse
SELECT customer.C_NAME, 
       customer.C_ADDRESS,
       customer.C_PHONE,
       orders.O_ORDERDATE,
       orders.O_ORDERSTATUS,
       orders.O_SHIPPRIORITY
FROM customer inner join orders on (customer.C_CUSTKEY = orders.O_CUSTKEY)
where customer.C_NAME = 'Customer#000000005'
-- Получившееся время - Execution time: 20.985 ms
-- План запроса:
Gather Motion 4:1  (slice2; segments: 4)  (cost=0.00..862.00 rows=1 width=76) (actual time=50.998..50.998 rows=0 loops=1)
  ->  Hash Join  (cost=0.00..862.00 rows=1 width=76) (never executed)
        Hash Cond: (customer.c_custkey = orders.o_custkey)
        ->  Seq Scan on customer  (cost=0.00..431.00 rows=1 width=70) (actual time=3.967..10.949 rows=1 loops=1)
              Filter: ((c_name)::text = 'Customer#000000005'::text)
        ->  Hash  (cost=431.00..431.00 rows=1 width=14) (actual time=34.049..34.049 rows=20000 loops=1)
              ->  Broadcast Motion 4:4  (slice1; segments: 4)  (cost=0.00..431.00 rows=1 width=14) (actual time=8.798..23.485 rows=20000 loops=1)
                    ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=14) (actual time=4.928..10.038 rows=5074 loops=1)

-- Индекс не применился (в том числе с set enable_seqscan=off). 
-- В таблице, по-видимому, слишком мало записей, чтобы оптимизатор считал нужным применять индексы

drop index idx_customer_name

-- Попробуем другой запрос. Возможно, нам нужны заказы по конкретному заказчику, но в разрезе статусов.
-- Поле O_ORDERSTATUS имеет три значения. Добавим bitmap index
-- Сначала выполним запрос без индекса 

explain analyse
SELECT customer.C_NAME, 
       customer.C_ADDRESS,
       customer.C_PHONE,
       orders.O_ORDERDATE,
       orders.O_ORDERSTATUS,
       orders.O_SHIPPRIORITY
FROM customer inner join orders on (customer.C_CUSTKEY = orders.O_CUSTKEY)
where customer.C_NAME = 'Customer#000000005' and O_ORDERSTATUS='P'
-- Получившееся время - Execution time: 41.890 ms
-- План запроса:
Gather Motion 4:1  (slice2; segments: 4)  (cost=0.00..862.00 rows=1 width=76) (actual time=39.539..39.539 rows=0 loops=1)
  ->  Hash Join  (cost=0.00..862.00 rows=1 width=76) (never executed)
        Hash Cond: (customer.c_custkey = orders.o_custkey)
        ->  Seq Scan on customer  (cost=0.00..431.00 rows=1 width=70) (actual time=0.087..2.490 rows=1 loops=1)
              Filter: ((c_name)::text = 'Customer#000000005'::text)
        ->  Hash  (cost=431.00..431.00 rows=1 width=14) (actual time=34.354..34.354 rows=7506 loops=1)
              ->  Broadcast Motion 4:4  (slice1; segments: 4)  (cost=0.00..431.00 rows=1 width=14) (actual time=5.623..32.475 rows=7506 loops=1)
                    ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=14) (actual time=0.173..31.656 rows=1914 loops=1)
                          Filter: (o_orderstatus = 'P'::bpchar)

create index idx_orders_status ON orders USING bitmap (O_ORDERSTATUS);

explain analyse
SELECT customer.C_NAME, 
       customer.C_ADDRESS,
       customer.C_PHONE,
       orders.O_ORDERDATE,
       orders.O_ORDERSTATUS,
       orders.O_SHIPPRIORITY
FROM customer inner join orders on (customer.C_CUSTKEY = orders.O_CUSTKEY)
where customer.C_NAME = 'Customer#000000005' and O_ORDERSTATUS='P';
-- Получившееся время - Execution time: 35.575 ms
-- План запроса:
Gather Motion 4:1  (slice2; segments: 4)  (cost=0.00..821.46 rows=1 width=76) (actual time=34.542..34.542 rows=0 loops=1)
  ->  Hash Join  (cost=0.00..821.46 rows=1 width=76) (never executed)
        Hash Cond: (customer.c_custkey = orders.o_custkey)
        ->  Seq Scan on customer  (cost=0.00..431.00 rows=1 width=70) (actual time=0.094..2.654 rows=1 loops=1)
              Filter: ((c_name)::text = 'Customer#000000005'::text)
        ->  Hash  (cost=390.46..390.46 rows=1 width=14) (actual time=30.408..30.408 rows=7506 loops=1)
              ->  Broadcast Motion 4:4  (slice1; segments: 4)  (cost=0.00..390.46 rows=1 width=14) (actual time=5.397..28.461 rows=7506 loops=1)
                    ->  Bitmap Heap Scan on orders  (cost=0.00..390.46 rows=1 width=14) (actual time=1.649..26.303 rows=1914 loops=1)
                          Recheck Cond: (o_orderstatus = 'P'::bpchar)
                          ->  Bitmap Index Scan on idx_orders_status  (cost=0.00..0.00 rows=0 width=0) (actual time=0.304..0.304 rows=1 loops=1)
                                Index Cond: (o_orderstatus = 'P'::bpchar)

-- Индекс применился, время сократилось. Но, возможно, партции сработают лучше?

-- добавление партиции по O_ORDERPRIORITY в orders
CREATE TABLE orders_partitioned (LIKE orders)
PARTITION BY LIST (O_ORDERSTATUS)
    (PARTITION urgent VALUES ('O'),
     PARTITION high VALUES ('P'),
     PARTITION medium VALUES ('F'),
     DEFAULT PARTITION other);

INSERT INTO orders_partitioned SELECT * FROM orders;

explain analyse
SELECT customer.C_NAME, 
       customer.C_ADDRESS,
       customer.C_PHONE,
       orders.O_ORDERDATE,
       orders.O_ORDERSTATUS,
       orders.O_SHIPPRIORITY
FROM customer inner join orders_partitioned orders on (customer.C_CUSTKEY = orders.O_CUSTKEY)
where customer.C_NAME = 'Customer#000000005' and O_ORDERSTATUS='P'
-- Получившееся время - Execution time: 29.621 ms
-- План запроса:
        ->  Seq Scan on customer  (cost=0.00..431.00 rows=1 width=70) (actual time=0.140..4.187 rows=1 loops=1)
              Filter: ((c_name)::text = 'Customer#000000005'::text)
        ->  Hash  (cost=431.00..431.00 rows=1 width=20) (actual time=20.769..20.769 rows=1917 loops=1)
              ->  Redistribute Motion 4:4  (slice1; segments: 4)  (cost=0.00..431.00 rows=1 width=20) (actual time=2.337..20.116 rows=1917 loops=1)
                    Hash Key: orders_partitioned.o_custkey
                    ->  Sequence  (cost=0.00..431.00 rows=1 width=20) (actual time=11.018..11.706 rows=1914 loops=1)
                          ->  Partition Selector for orders_partitioned (dynamic scan id: 1)  (cost=10.00..100.00 rows=25 width=4) (never executed)
                                Partitions selected: 1 (out of 4)
                          ->  Dynamic Seq Scan on orders_partitioned (dynamic scan id: 1)  (cost=0.00..431.00 rows=1 width=20) (actual time=11.013..11.554 rows=1914 loops=1)
                                Filter: (o_orderstatus = 'P'::bpchar)
                                Partitions scanned:  Avg 1.0 (out of 4) x 4 workers.  Max 1 parts (seg0).

-- Да, партиции лучше оптимизировали время

-- Проверим, сколько места занимает наш индекс:
select relname as table_name,
pg_size_pretty(pg_total_relation_size(relid)) as "total size", 
pg_size_pretty(pg_relation_size(relid)) as "actual size", 
pg_size_pretty(pg_indexes_size(relid)) as "index size"
from pg_catalog.pg_statio_user_tables
where  relname='orders'
order by pg_total_relation_size(17603) desc

orders	337 MB	138 MB	4576 kB

-- Индекс не очень много места занимает, но партиции работают лучше, и они не требуют перестроения индекса при вставке. Итог: Лучше сделать партицирование

-- Retrieve Detailed Order Information with Line Items
explain analyse
SELECT orders.O_TOTALPRICE,
       orders.O_ORDERDATE,
       orders.O_ORDERSTATUS,
       orders.O_SHIPPRIORITY,
       lineitem.L_QUANTITY, 
       lineitem.L_EXTENDEDPRICE,
       lineitem.L_DISCOUNT
FROM lineitem inner join orders on (lineitem.L_ORDERKEY = orders.O_ORDERKEY)
where orders.O_ORDERKEY = '6'
-- Получившееся время - Execution time: 43.245 ms
-- План запроса:
Gather Motion 4:1  (slice2; segments: 4)  (cost=0.00..862.00 rows=1 width=38) (actual time=36.104..40.970 rows=1 loops=1)
  ->  Hash Join  (cost=0.00..862.00 rows=1 width=38) (actual time=5.282..35.276 rows=1 loops=1)
        Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
        Extra Text: (seg2)   Hash chain length 1.0 avg, 1 max, using 1 of 262144 buckets.
        ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=27) (actual time=0.145..29.873 rows=1 loops=1)
              Filter: (o_orderkey = 6::bigint)
        ->  Hash  (cost=431.00..431.00 rows=1 width=27) (actual time=4.839..4.839 rows=1 loops=1)
              ->  Broadcast Motion 4:4  (slice1; segments: 4)  (cost=0.00..431.00 rows=1 width=27) (actual time=4.834..4.835 rows=1 loops=1)
                    ->  Seq Scan on lineitem  (cost=0.00..431.00 rows=1 width=27) (actual time=0.314..3.602 rows=1 loops=1)
                          Filter: (l_orderkey = 6::bigint)

-- Предполагаем, что нужно будет возвращать детальную информацию по конкретному заказу.
-- Конкретно в таком запросе партицирование не поможет, так как выбираем все даты
-- O_ORDERKEY имеет большой процент уникальных значений и по нему идет поиск. 
-- Gопробуем добавить его в b-tree индекс для эксперимента. 
-- По сути O_ORDERKEY - это PK, а PK - всегда индекс. Так что мы воспроизводим constraint primary key

create index idx_order_key ON order USING btree (O_ORDERKEY)

explain analyse
SELECT orders.O_TOTALPRICE,
       orders.O_ORDERDATE,
       orders.O_ORDERSTATUS,
       orders.O_SHIPPRIORITY,
       lineitem.L_QUANTITY, 
       lineitem.L_EXTENDEDPRICE,
       lineitem.L_DISCOUNT
FROM lineitem inner join orders on (lineitem.L_ORDERKEY = orders.O_ORDERKEY)
where orders.O_ORDERKEY = '6'
-- План запроса:
Gather Motion 4:1  (slice2; segments: 4)  (cost=0.00..862.00 rows=1 width=38) (actual time=38.841..38.843 rows=1 loops=1)
  ->  Hash Join  (cost=0.00..862.00 rows=1 width=38) (actual time=5.339..38.031 rows=1 loops=1)
        Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
        Extra Text: (seg2)   Hash chain length 1.0 avg, 1 max, using 1 of 262144 buckets.
        ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=27) (actual time=0.138..32.593 rows=1 loops=1)
              Filter: (o_orderkey = 6::bigint)
        ->  Hash  (cost=431.00..431.00 rows=1 width=27) (actual time=4.977..4.977 rows=1 loops=1)
              ->  Broadcast Motion 4:4  (slice1; segments: 4)  (cost=0.00..431.00 rows=1 width=27) (actual time=4.012..4.973 rows=1 loops=1)
                    ->  Seq Scan on lineitem  (cost=0.00..431.00 rows=1 width=27) (actual time=0.306..3.233 rows=1 loops=1)
                          Filter: (l_orderkey = 6::bigint)

-- Оптимизатор счел не нужным применять индекс

-- Вывод: индекс не помог

-- Retrieve Supplier and Part Information for Each Supplier-Part Relationship
-- Добавим вероятные фильтры для такого поиска. Интересно смотреть детали по размеру и фильтру стоимости
explain analyse
SELECT part.P_NAME, 
       supplier.S_NAME,
       part.P_BRAND,
       part.P_SIZE,
       part.P_RETAILPRICE,
       supplier.S_ADDRESS,
       nation.N_NAME
FROM part inner join partsupp on (part.P_PARTKEY = partsupp.PS_PARTKEY)
          inner join supplier on (supplier.S_SUPPKEY = partsupp.PS_SUPPKEY)
where part.P_SIZE=41 and partsupp.PS_SUPPLYCOST<400
-- Получившееся время - Planning time: 22.986 ms
-- План запроса:
Gather Motion 4:1  (slice3; segments: 4)  (cost=0.00..1293.00 rows=1 width=101) (actual time=142.601..158.193 rows=1225 loops=1)
  ->  Hash Join  (cost=0.00..1293.00 rows=1 width=101) (actual time=141.386..150.950 rows=333 loops=1)
        Hash Cond: (part.p_partkey = partsupp.ps_partkey)
        Extra Text: (seg1)   Hash chain length 2.1 avg, 11 max, using 30453 of 131072 buckets.
        ->  Seq Scan on part  (cost=0.00..431.00 rows=1 width=57) (actual time=0.130..6.622 rows=197 loops=1)
              Filter: (p_size = 41)
        ->  Hash  (cost=862.00..862.00 rows=1 width=52) (actual time=140.541..140.541 rows=63973 loops=1)
              ->  Broadcast Motion 4:4  (slice2; segments: 4)  (cost=0.00..862.00 rows=1 width=52) (actual time=72.856..123.908 rows=63973 loops=1)
                    ->  Hash Join  (cost=0.00..862.00 rows=1 width=52) (actual time=66.928..77.932 rows=16484 loops=1)
                          Hash Cond: (supplier.s_suppkey = partsupp.ps_suppkey)
                          Extra Text: (seg0)   Hash chain length 32.1 avg, 67 max, using 1995 of 262144 buckets.
                          ->  Seq Scan on supplier  (cost=0.00..431.00 rows=1 width=52) (actual time=0.115..1.235 rows=517 loops=1)
                          ->  Hash  (cost=431.00..431.00 rows=1 width=8) (actual time=65.802..65.802 rows=64004 loops=1)
                                ->  Broadcast Motion 4:4  (slice1; segments: 4)  (cost=0.00..431.00 rows=1 width=8) (actual time=0.078..55.423 rows=64004 loops=1)
                                      ->  Seq Scan on partsupp  (cost=0.00..431.00 rows=1 width=8) (actual time=0.156..21.607 rows=16160 loops=1)
                                            Filter: (ps_supplycost < 400::numeric)

-- betree индекс на PS_SUPPLYCOST оптимизатором не применяется при выполнении запроса. bitmap индекс на P_SIZE также не применяется оптимизатором
-- Вывод: betree индексы оптимизатор игнорирорует. bitmap, возможно, игнорирует из-за небольшого размера таблицы

-- Retrieve Comprehensive Customer Order and Line Item Details  
-- Предположим, что мы захотим находить крупные заказы за определенный квартал для отчетности  
explain analyse
SELECT customer.C_NAME, 
       lineitem.L_QUANTITY, 
       lineitem.L_EXTENDEDPRICE,
       lineitem.L_DISCOUNT,
       orders.O_ORDERDATE,
       orders.O_ORDERSTATUS,
       orders.O_SHIPPRIORITY
FROM lineitem inner join orders on (lineitem.L_ORDERKEY = orders.O_ORDERKEY)    
              inner join customer on (orders.O_CUSTKEY = customer.C_CUSTKEY)
where L_QUANTITY > 1000 and O_ORDERDATE between '1992-01-01' and '1992-03-31'   
-- Получившееся время - Execution time: 18.865 ms
-- План запроса:
Hash Join  (cost=0.00..1293.00 rows=1 width=48) (actual time=17.620..17.620 rows=0 loops=1)
  Hash Cond: (orders.o_custkey = customer.c_custkey)
  Extra Text: Hash chain length 1.1 avg, 4 max, using 28256 of 262144 buckets.
  ->  Hash Join  (cost=0.00..862.00 rows=1 width=33) (actual time=0.699..0.699 rows=0 loops=1)
        Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
        Extra Text: Hash chain length 1.0 avg, 2 max, using 770 of 262144 buckets.
        ->  Gather Motion 4:1  (slice1; segments: 4)  (cost=0.00..431.00 rows=1 width=27) (actual time=0.002..0.002 rows=0 loops=1)
              ->  Seq Scan on lineitem  (cost=0.00..431.00 rows=1 width=27) (never executed)
                    Filter: (l_quantity > 1000::numeric)
        ->  Hash  (cost=431.00..431.00 rows=1 width=22) (actual time=0.278..0.278 rows=772 loops=1)
              Buckets: 262144  Batches: 1  Memory Usage: 37kB
              ->  Gather Motion 4:1  (slice2; segments: 4)  (cost=0.00..431.00 rows=1 width=22) (actual time=0.022..0.118 rows=772 loops=1)
                    ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=22) (actual time=0.235..3.008 rows=201 loops=1)
                          Filter: ((o_orderdate >= '1992-01-01'::date) AND (o_orderdate <= '1992-03-31'::date))
  ->  Hash  (cost=431.00..431.00 rows=1 width=23) (actual time=15.274..15.274 rows=29999 loops=1)
        Buckets: 262144  Batches: 1  Memory Usage: 1407kB
        ->  Gather Motion 4:1  (slice3; segments: 4)  (cost=0.00..431.00 rows=1 width=23) (actual time=2.247..8.820 rows=29999 loops=1)
              ->  Seq Scan on customer  (cost=0.00..431.00 rows=1 width=23) (actual time=0.067..2.812 rows=7530 loops=1)

-- Попробуем добавить btree индекс на количество

create index idx_lineitem_quantity ON lineitem USING btree (L_QUANTITY)

explain analyse
SELECT customer.C_NAME, 
       lineitem.L_QUANTITY, 
       lineitem.L_EXTENDEDPRICE,
       lineitem.L_DISCOUNT,
       orders.O_ORDERDATE,
       orders.O_ORDERSTATUS,
       orders.O_SHIPPRIORITY
FROM lineitem inner join orders on (lineitem.L_ORDERKEY = orders.O_ORDERKEY)    
              inner join customer on (orders.O_CUSTKEY = customer.C_CUSTKEY)
where L_QUANTITY > 1000 and O_ORDERDATE between '1992-01-01' and '1992-03-31'   
-- Получившееся время - Planning time: 18.021 ms
-- План запроса:
Hash Join  (cost=0.00..1293.00 rows=1 width=48) (actual time=43.601..43.601 rows=0 loops=1)
  Hash Cond: (orders.o_custkey = customer.c_custkey)
  Extra Text: Hash chain length 1.1 avg, 4 max, using 28256 of 262144 buckets.
  ->  Hash Join  (cost=0.00..862.00 rows=1 width=33) (actual time=27.415..27.415 rows=0 loops=1)
        Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
        Extra Text: Hash chain length 1.0 avg, 3 max, using 10840 of 262144 buckets.
        ->  Gather Motion 4:1  (slice1; segments: 4)  (cost=0.00..431.00 rows=1 width=27) (actual time=0.005..0.005 rows=0 loops=1)
              ->  Seq Scan on lineitem  (cost=0.00..431.00 rows=1 width=27) (never executed)
                    Filter: (l_quantity > 1000::numeric)
        ->  Hash  (cost=431.00..431.00 rows=1 width=22) (actual time=26.315..26.315 rows=11058 loops=1)
              Buckets: 262144  Batches: 1  Memory Usage: 519kB
              ->  Gather Motion 4:1  (slice2; segments: 4)  (cost=0.00..431.00 rows=1 width=22) (actual time=0.026..23.942 rows=11058 loops=1)
                    ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=22) (actual time=0.253..37.951 rows=2809 loops=1)
                          Filter: ((o_orderdate >= '1992-01-01'::date) AND (o_orderdate <= '1992-03-31'::date))
  ->  Hash  (cost=431.00..431.00 rows=1 width=23) (actual time=14.848..14.848 rows=29999 loops=1)
        Buckets: 262144  Batches: 1  Memory Usage: 1407kB
        ->  Gather Motion 4:1  (slice3; segments: 4)  (cost=0.00..431.00 rows=1 width=23) (actual time=2.500..9.158 rows=29999 loops=1)
              ->  Seq Scan on customer  (cost=0.00..431.00 rows=1 width=23) (actual time=0.083..2.796 rows=7530 loops=1)
 -- с btree индексом все как обычно - игнорируется             

-- Добавим партицирование по дате
drop table orders_partitioned;

CREATE TABLE orders_partitioned (LIKE orders)
PARTITION BY RANGE (O_ORDERDATE) 
    (start('1992-01-01') INCLUSIVE end ('1998-12-31') INCLUSIVE every (30), default partition others);

INSERT INTO orders_partitioned SELECT * FROM orders;

-- Повторим запрос
explain analyse
SELECT customer.C_NAME, 
       lineitem.L_QUANTITY, 
       lineitem.L_EXTENDEDPRICE,
       lineitem.L_DISCOUNT,
       orders.O_ORDERDATE,
       orders.O_ORDERSTATUS,
       orders.O_SHIPPRIORITY
FROM lineitem inner join orders_partitioned orders on (lineitem.L_ORDERKEY = orders.O_ORDERKEY)    
              inner join customer on (orders.O_CUSTKEY = customer.C_CUSTKEY)
where L_QUANTITY > 1000 and O_ORDERDATE between '1992-01-01' and '1992-03-31'  
-- Получившееся время - Execution time: 7.359 ms
-- План запроса:
Hash Join  (cost=0.00..1293.00 rows=1 width=47) (actual time=4.770..4.770 rows=0 loops=1)
  Hash Cond: (orders_partitioned.o_orderkey = lineitem.l_orderkey)
  Extra Text: Hash chain length 0.0 avg, 0 max, using 0 of 131072 buckets.
  ->  Gather Motion 4:1  (slice2; segments: 4)  (cost=0.00..862.00 rows=1 width=36) (never executed)
        ->  Hash Join  (cost=0.00..862.00 rows=1 width=36) (actual time=4.695..5.053 rows=271 loops=1)
              Hash Cond: (customer.c_custkey = orders_partitioned.o_custkey)
              Extra Text: (seg0)   Hash chain length 1.3 avg, 4 max, using 2038 of 262144 buckets.
              ->  Seq Scan on customer  (cost=0.00..431.00 rows=1 width=23) (actual time=0.065..0.338 rows=835 loops=1)
              ->  Hash  (cost=431.00..431.00 rows=1 width=21) (actual time=4.218..4.218 rows=2889 loops=1)
                    ->  Redistribute Motion 4:4  (slice1; segments: 4)  (cost=0.00..431.00 rows=1 width=21) (actual time=1.715..3.703 rows=2889 loops=1)
                          Hash Key: orders_partitioned.o_custkey
                          ->  Sequence  (cost=0.00..431.00 rows=1 width=21) (actual time=0.142..1.450 rows=2809 loops=1)
                                ->  Partition Selector for orders_partitioned (dynamic scan id: 1)  (cost=10.00..100.00 rows=25 width=4) (never executed)
                                      Partitions selected: 5 (out of 87)
                                ->  Dynamic Seq Scan on orders_partitioned (dynamic scan id: 1)  (cost=0.00..431.00 rows=1 width=21) (actual time=0.137..1.202 rows=2809 loops=1)
                                      Filter: ((o_orderdate >= '1992-01-01'::date) AND (o_orderdate <= '1992-03-31'::date))
                                      Partitions scanned:  Avg 5.0 (out of 87) x 4 workers.  Max 5 parts (seg0).
  ->  Hash  (cost=431.00..431.00 rows=1 width=27) (actual time=4.534..4.534 rows=0 loops=1)
        Buckets: 131072  Batches: 1  Memory Usage: 0kB
        ->  Gather Motion 4:1  (slice3; segments: 4)  (cost=0.00..431.00 rows=1 width=27) (actual time=4.532..4.532 rows=0 loops=1)
              ->  Seq Scan on lineitem  (cost=0.00..431.00 rows=1 width=27) (never executed)
                    Filter: (l_quantity > 1000::numeric)

-- Вывод: партицирование хорошо работает для оптимизации, индекс так и не используется

-- Retrieve All Parts Supplied by a Specific Supplier with Supplier Details
explain analyse
SELECT supplier.S_NAME, 
       part.P_NAME, 
       partsupp.PS_SUPPLYCOST, 
       partsupp.PS_AVAILQTY, 
       partsupp.PS_COMMENT
FROM part inner join partsupp on (part.P_PARTKEY = partsupp.PS_PARTKEY)
          inner join supplier on (supplier.S_SUPPKEY = partsupp.PS_SUPPKEY)
where PS_suppkey  = 5   
-- Получившееся время - Execution time: 26.701 ms
-- План запроса:
Hash Join  (cost=0.00..1293.01 rows=1 width=153) (actual time=22.836..25.213 rows=80 loops=1)
  Hash Cond: (partsupp.ps_partkey = part.p_partkey)
  Extra Text: Hash chain length 1.2 avg, 4 max, using 34411 of 131072 buckets.
  ->  Gather Motion 4:1  (slice2; segments: 4)  (cost=0.00..862.00 rows=1 width=124) (actual time=5.221..6.451 rows=80 loops=1)
        ->  Hash Join  (cost=0.00..862.00 rows=1 width=124) (actual time=2.102..22.215 rows=24 loops=1)
              Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
              Extra Text: (seg1)   Hash chain length 1.0 avg, 1 max, using 1 of 131072 buckets.
              ->  Seq Scan on partsupp  (cost=0.00..431.00 rows=1 width=102) (actual time=0.531..20.534 rows=24 loops=1)
                    Filter: (ps_suppkey = 5)
              ->  Hash  (cost=431.00..431.00 rows=1 width=30) (actual time=1.653..1.653 rows=1 loops=1)
                    ->  Broadcast Motion 4:4  (slice1; segments: 4)  (cost=0.00..431.00 rows=1 width=30) (actual time=1.649..1.649 rows=1 loops=1)
                          ->  Seq Scan on supplier  (cost=0.00..431.00 rows=1 width=30) (actual time=0.077..0.258 rows=1 loops=1)
                                Filter: (s_suppkey = 5)
  ->  Hash  (cost=431.00..431.00 rows=1 width=37) (actual time=17.498..17.498 rows=39999 loops=1)
        Buckets: 131072  Batches: 1  Memory Usage: 2471kB
        ->  Gather Motion 4:1  (slice3; segments: 4)  (cost=0.00..431.00 rows=1 width=37) (actual time=2.024..11.710 rows=39999 loops=1)
              ->  Seq Scan on part  (cost=0.00..431.00 rows=1 width=37) (actual time=0.149..3.929 rows=10055 loops=1)

-- Попробуем сделать индекс из S_suppkey

create index idx_partsupp_suppkey ON partsupp USING bitmap (PS_suppkey)

explain analyse
SELECT supplier.S_NAME, 
       part.P_NAME, 
       partsupp.PS_SUPPLYCOST, 
       partsupp.PS_AVAILQTY, 
       partsupp.PS_COMMENT
FROM part inner join partsupp on (part.P_PARTKEY = partsupp.PS_PARTKEY)
          inner join supplier on (supplier.S_SUPPKEY = partsupp.PS_SUPPKEY)
where S_suppkey  = 5  
-- Получившееся время - Planning time: 26.643 ms
-- План запроса:
Hash Join  (cost=0.00..1252.47 rows=1 width=153) (actual time=23.542..25.516 rows=80 loops=1)
  Hash Cond: (partsupp.ps_partkey = part.p_partkey)
  Extra Text: Hash chain length 1.2 avg, 4 max, using 34411 of 131072 buckets.
  ->  Gather Motion 4:1  (slice2; segments: 4)  (cost=0.00..821.46 rows=1 width=124) (actual time=0.006..0.023 rows=80 loops=1)
        ->  Nested Loop  (cost=0.00..821.46 rows=1 width=124) (actual time=3.459..4.830 rows=24 loops=1)
              Join Filter: true
              ->  Broadcast Motion 4:4  (slice1; segments: 4)  (cost=0.00..431.00 rows=1 width=30) (actual time=2.519..2.523 rows=1 loops=1)
                    ->  Seq Scan on supplier  (cost=0.00..431.00 rows=1 width=30) (actual time=0.077..0.268 rows=1 loops=1)
                          Filter: (s_suppkey = 5)
              ->  Bitmap Heap Scan on partsupp  (cost=0.00..390.46 rows=1 width=98) (actual time=0.939..2.296 rows=24 loops=1)
                    Recheck Cond: ((ps_suppkey = supplier.s_suppkey) AND (ps_suppkey = 5))
                    ->  Bitmap Index Scan on idx_partsupp_suppkey  (cost=0.00..0.00 rows=0 width=0) (actual time=0.191..0.191 rows=1 loops=1)
                          Index Cond: ((ps_suppkey = supplier.s_suppkey) AND (ps_suppkey = 5))
  ->  Hash  (cost=431.00..431.00 rows=1 width=37) (actual time=23.384..23.384 rows=39999 loops=1)
        Buckets: 131072  Batches: 1  Memory Usage: 2471kB
        ->  Gather Motion 4:1  (slice3; segments: 4)  (cost=0.00..431.00 rows=1 width=37) (actual time=5.352..15.786 rows=39999 loops=1)
              ->  Seq Scan on part  (cost=0.00..431.00 rows=1 width=37) (actual time=0.084..3.801 rows=10055 loops=1)

-- Вывод: время не изменилось, а индекс занимает место и увеличивает время вставки. Использование не целесообразно

      
